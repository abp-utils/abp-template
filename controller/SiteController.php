<?php

namespace controller;

use abp\model\User;
use component\controller\CommonController;
use abp\exception\UserException;
use component\exception\ChallengeCodeException;
use component\form\Challenge;
use component\form\Login;
use component\form\Reg;
use Abp;
use model\UserSession;

class SiteController extends CommonController
{
    /**
     * @return bool
     */
    public function beforeAction(): bool
    {
        if ($this->action == 'logout') {
            return parent::beforeAction(); // TODO: Change the autogenerated stub
        }
        if ($this->getUser()) {
            $this->redirect('profile');
        }
        if ($this->action != 'challenge') {
            $userSession = $this->getUserSession();
            if ($userSession !== null && !$this->getUserSession()->is_active) {
                $this->redirect('challenge');
            }
        }
        return parent::beforeAction(); // TODO: Change the autogenerated stub
    }

    public function loginAction()
    {
        $this->title = 'Авторизация';
        $form = new Login();

        try {
            if ($form->validate(Abp::post())) {
                if ($form->execute()) {
                    $this->redirect('');
                }
                throw new UserException('Не удалось авторизоваться. Попробуйте позже.');
            }
        } catch (ChallengeCodeException $e) {
            $this->redirect('challenge');
        } catch (UserException $e) {
            $this->addError($e->getMessage());
        } catch (\Throwable $e) {
            $this->addError($e->getMessage());
        }

        $this->render([
            'user' => null,
            'form' => $form,
        ]);
    }

    public function regAction(array $param = [])
    {
        $this->title = 'Регистрация';
        $form = new Reg();

        try {
            if ($form->validate(Abp::post())) {
                if ($form->execute()) {
                    $this->redirect('');
                }
            }
        } catch (UserException $e) {
            $this->addError($e->getMessage());
        } catch (\Throwable $e) {
            $this->addError('Неизвестная ошибка.');
        }

        $this->render([
            'user' => null,
            'form' => $form,
        ]);
    }

    public function logoutAction()
    {
        Abp::$user->logoutCookie();
        $this->redirect();
    }

    public function challengeAction()
    {
        $this->title = 'Подтверждение аккаунта';
        $form = new Challenge();
        echo 'test 1' . PHP_EOL;
        try {
            if ($form->validate(Abp::post())) {
                echo 'test 2' . PHP_EOL;
                if ($form->execute()) {
                    echo 'test 3' . PHP_EOL;
                    $this->redirect();
                }
            }
        } catch (UserException $e) {
            echo 'test exp' . PHP_EOL;
            $this->addError($e->getMessage());
        } catch (\Throwable $e) {
            echo 'test exp2' . PHP_EOL;
            $this->addError('Неизвестная ошибка.');
        }
        echo 'test 4' . PHP_EOL;
        $userSession = $this->getUserSession();
        if ($userSession === null) {
            echo 'test 5' . PHP_EOL;
            $this->redirect();
        }
        $user = $userSession->User;
        echo 'test 6' . PHP_EOL;
        $this->render([
            'form' => $form,
            'user' => $user,
            'challenge' => true,
        ]);
    }
}